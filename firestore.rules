rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isUserAuthenticated() {
      return request.auth != null;
    }
    
    function isUserMemberOfWorkspace(workspaceId) {
      return isUserAuthenticated() && exists(/databases/$(database)/documents/userProfiles/$(request.auth.uid)) && workspaceId in get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.workspaces;
    }

    // USER PROFILES
    match /userProfiles/{userId} {
      // Users can only read and update their own profile.
      allow read, update: if isUserAuthenticated() && request.auth.uid == userId;
      // Users can create their own profile.
      allow create: if isUserAuthenticated() && request.auth.uid == userId;
    }

    // WORKSPACES
    match /workspaces/{workspaceId} {
      // Users can read a workspace if they are a member.
      allow read: if isUserAuthenticated() && request.auth.uid in resource.data.members;
      // Users can create a workspace if they are authenticated and are the first member.
      allow create: if isUserAuthenticated() && request.auth.uid == request.resource.data.members[0];
    }
    
    // INVOICES
    match /invoices/{invoiceId} {
      // Allow read/write operations if the user is a member of the workspace the invoice belongs to.
      allow read, update, delete: if isUserMemberOfWorkspace(resource.data.workspaceId);
      // Allow create if the user is a member of the workspace they are assigning the invoice to.
      allow create: if isUserMemberOfWorkspace(request.resource.data.workspaceId);
    }

    match /invoices/{invoiceId} {
      // Allow list (query) operations only when the query is filtered by a workspaceId the user is a member of.
      // This is the key rule that enables querying collections securely.
      allow list: if isUserMemberOfWorkspace(request.query.workspaceId);
    }
  }
}
